generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model candidatos {
  id                      Int                       @id @default(autoincrement())
  nome                    String                    @db.VarChar(100)
  email                   String                    @unique @db.VarChar(254)
  senha                   String
  genero                  String                    @db.VarChar(30)
  data_nasc               DateTime                  @db.Date
  foto                    String?                   @default("/assets/imgs/genPfp.png")
  descricao               String?                   @default("Sua descrição")
  cpf                     String?                   @unique(map: "candidatos_cpf_idx")
  estado                  String?
  cidade                  String?
  instagram               String?
  github                  String?
  youtube                 String?
  twitter                 String?
  pronomes                String?
  data_criacao            DateTime?                 @default(now()) @db.Timestamptz(6)
  nivel                   String                    @default("comum") @db.VarChar(10)
  chats                   chats[]
  experiencias            experiencias[]
  favoritos_candidatos    favoritos_candidatos[]
  favoritos_chats_cand    favoritos_chats_cand[]
  favoritos_empresas      favoritos_empresas[]
  mensagens_ocultas_cand  mensagens_ocultas_cand[]
  notificacoes_candidatos notificacoes_candidatos[]
  tags                    tags[]
  tokens                  tokens[]
}

model candidatos_pend {
  id        Int       @id @default(autoincrement())
  nome      String
  email     String    @unique
  senha     String
  genero    String
  data_nasc DateTime  @db.Date
  confirmed Boolean?  @default(false)
  criado_em DateTime? @default(now()) @db.Timestamptz(6)
  codigo    String
  expira_em DateTime  @db.Timestamptz(6)
}

model chats {
  id                   Int                    @id @default(autoincrement())
  empresa              String
  candidato            Int
  data_criacao         DateTime?              @default(now()) @db.Timestamptz(6)
  bloqueado            Boolean                @default(false)
  bloqueador_tipo      String?                @db.VarChar(9)
  candidatos           candidatos             @relation(fields: [candidato], references: [id], onDelete: Cascade, onUpdate: NoAction)
  empresas             empresas               @relation(fields: [empresa], references: [cnpj], onDelete: Cascade, onUpdate: NoAction)
  favoritos_chats_cand favoritos_chats_cand[]
  favoritos_chats_emp  favoritos_chats_emp[]
  mensagens            mensagens[]
}

model empresas {
  cnpj                  String                  @id
  nome_fant             String
  telefone              String
  email                 String                  @unique
  senha                 String
  razao_soci            String                  @unique
  cep                   String
  complemento           String?
  numero                String
  descricao             String?
  setor                 String?
  porte                 String?
  data_fund             DateTime?               @db.Date
  contato               String?
  site                  String?
  instagram             String?
  github                String?
  youtube               String?
  twitter               String?
  foto                  String?                 @default("/assets/imgs/genPfp.png")
  data_criacao          DateTime?               @default(now()) @db.Timestamptz(6)
  estado                String                  @db.Char(2)
  cidade                String                  @db.VarChar(25)
  chats                 chats[]
  favoritos_candidatos  favoritos_candidatos[]
  favoritos_chats_emp   favoritos_chats_emp[]
  favoritos_empresas    favoritos_empresas[]
  mensagens_ocultas_emp mensagens_ocultas_emp[]
  notificacoes_empresas notificacoes_empresas[]
  tokens                tokens[]
}

model experiencias {
  id           Int        @id @default(autoincrement())
  titulo       String
  descricao    String
  imagem       String?    @default("/assets/imgs/SalsaHire.png")
  data_criacao DateTime?  @default(now()) @db.Timestamptz(6)
  candidato    Int
  candidatos   candidatos @relation(fields: [candidato], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model mensagens {
  id                     Int                      @id @default(autoincrement())
  mensagem               String
  de                     String
  status                 Boolean?                 @default(false)
  data_criacao           DateTime?                @default(now()) @db.Timestamptz(6)
  chat                   Int?
  autor                  String
  chats                  chats?                   @relation(fields: [chat], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mensagens_ocultas_cand mensagens_ocultas_cand[]
  mensagens_ocultas_emp  mensagens_ocultas_emp[]
}

model tags {
  id           Int        @id @default(autoincrement())
  nome         String
  data_criacao DateTime?  @default(now()) @db.Timestamptz(6)
  candidato    Int
  candidatos   candidatos @relation(fields: [candidato], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tokens {
  id           Int         @id @default(autoincrement())
  candidato_id Int?
  empresa_cnpj String?     @db.Char(14)
  tipo         String      @db.VarChar(10)
  token        String      @unique(map: "token_unico")
  data_criacao DateTime?   @default(now()) @db.Timestamp(6)
  expira_em    DateTime    @db.Timestamp(6)
  candidatos   candidatos? @relation(fields: [candidato_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  empresas     empresas?   @relation(fields: [empresa_cnpj], references: [cnpj], onDelete: Cascade, onUpdate: NoAction)
}

model favoritos_empresas {
  id           Int         @id @default(autoincrement())
  id_candidato Int?
  cnpj_empresa String?
  data_criacao DateTime?   @default(now()) @db.Timestamptz(6)
  empresas     empresas?   @relation(fields: [cnpj_empresa], references: [cnpj], onDelete: Cascade, onUpdate: NoAction)
  candidatos   candidatos? @relation(fields: [id_candidato], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model favoritos_candidatos {
  id           Int         @id @default(autoincrement())
  id_candidato Int?
  cnpj_empresa String?
  data_criacao DateTime?   @default(now()) @db.Timestamptz(6)
  empresas     empresas?   @relation(fields: [cnpj_empresa], references: [cnpj], onDelete: Cascade, onUpdate: NoAction)
  candidatos   candidatos? @relation(fields: [id_candidato], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notificacoes_candidatos {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tipo         String     @default("sistema") @db.VarChar(20)
  titulo       String     @db.VarChar(60)
  texto        String     @db.VarChar(200)
  data_criacao DateTime   @default(now()) @db.Timestamptz(6)
  lida         Boolean    @default(false)
  candidato_id Int
  candidatos   candidatos @relation(fields: [candidato_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([candidato_id], map: "idx_notif_candidato")
}

model notificacoes_empresas {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tipo         String   @default("sistema") @db.VarChar(20)
  titulo       String   @db.VarChar(60)
  texto        String   @db.VarChar(200)
  data_criacao DateTime @default(now()) @db.Timestamptz(6)
  lida         Boolean  @default(false)
  empresa_cnpj String
  empresas     empresas @relation(fields: [empresa_cnpj], references: [cnpj], onDelete: Cascade, onUpdate: NoAction)

  @@index([empresa_cnpj], map: "idx_notif_empresa")
}

model favoritos_chats_cand {
  id           Int        @id @default(autoincrement())
  id_chat      Int
  id_candidato Int
  data_criacao DateTime?  @default(now()) @db.Timestamptz(6)
  candidatos   candidatos @relation(fields: [id_candidato], references: [id], onDelete: Cascade, onUpdate: NoAction)
  chats        chats      @relation(fields: [id_chat], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model favoritos_chats_emp {
  id           Int       @id @default(autoincrement())
  id_chat      Int
  cnpj_empresa String
  data_criacao DateTime? @default(now()) @db.Timestamptz(6)
  empresas     empresas  @relation(fields: [cnpj_empresa], references: [cnpj], onDelete: Cascade, onUpdate: NoAction)
  chats        chats     @relation(fields: [id_chat], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model mensagens_ocultas_cand {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidato_id Int
  mensagem_id  Int
  data_criacao DateTime   @default(now()) @db.Timestamptz(6)
  candidatos   candidatos @relation(fields: [candidato_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mensagens    mensagens  @relation(fields: [mensagem_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model mensagens_ocultas_emp {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  empresa_cnpj String
  mensagem_id  Int
  data_criacao DateTime  @default(now()) @db.Timestamptz(6)
  empresas     empresas  @relation(fields: [empresa_cnpj], references: [cnpj], onDelete: Cascade, onUpdate: NoAction)
  mensagens    mensagens @relation(fields: [mensagem_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
